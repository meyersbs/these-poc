name: T.H.E.S.E. MistakeBot

on:
  issues:
    types:
      - labeled

jobs:
  mistakebot:
    if: contains( github.event.issue.labels.*.name, 'to-err-is-human')
    runs-on: ubuntu-latest
    container:
      image: andymeneely/squib

    steps:
      - run: |
          echo A comment on PR $NUMBER
        env:
          NUMBER: ${{ github.event.issue.number }}
      - name: Query for other mistake issues
        uses: octokit/graphql-action@v2.x
        id: count-err-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          query: |
           {
              repository(owner: "VulnerabilityHistoryProject", name: "vulnerability-history") {
                issues(labels: "to-err-is-human", first: 100) {
                  edges {
                    node {
                      id
                      number
                      title
                    }
                  }
                }
              }
            }
      - name: Run Squib
      # docker run --rm -v "%cd%":/usr/src/app andymeneely/squib ruby hello.rb
        run: |
          ruby -e "require 'squib';puts 'hi from squib!'"
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: mistakes
          message: |
            :microscope: Hello, there! I'm **MistakeBot**. My purpose is to help you document and reflect on your **Human Errors**, actions that result in something that was "not intended by the actor; not desired by a set of rules or an external observer; or that led the task or system outside its acceptable limits [Source](https://www.taylorfrancis.com/books/mono/10.1201/9781003070375/human-error-john-senders-neville-moray)."

            Don't be shy, _everyone_ experiences human errors, and I'm not here to judge. I just want to help you learn from your human errors, so, let's get started!

            "First, here are some definitions for you:"

            # Definitions
            - **Slips**: Failing to complete a properly planned step due to inattention, such as putting the wrong key in the ignition, or overlooking stakeholder requirements.
            - **Lapses**: Failing to complete a properly planned step due to memory failure, such as forgetting to put the car in reverse before backing up, or forgetting to check if a pointer is non-null before dereferencing it.
            - **Mistakes**: Planning errors that occur when the plan is inadequate, such as getting stuck in traffic because you didn't consider the impact of the bridge closing, or choosing an inadequate sorting algorithm.

            # Slips
            - [ ] S01 **Typos & Misspellings**: Typos and misspellings may occur in code comments, documentation (and other development artifacts), or when typing the name of a variable, function, or class. Examples include misspelling a variable name, writing down the wrong number/name/word during requirements elicitation, referencing the wrong function in a code comment, and inconsistent whitespace (that does not result in a syntax error).
            - [ ] S02 **Syntax Errors**: Any error in coding language syntax that impacts the executability of the code. Note that Logical Errors (e.g. += instead of +) are not Syntax Errors. Examples include mixing tabs and spaces (e.g. Python), unmatched brackets/braces/parenthesis/quotes, and missing semicolons (e.g. Java).
            - [ ] S03 **Overlooking Documented Information**: Errors resulting from overlooking (internally and externally) documented information, such as project descriptions, stakeholder requirements, API/library/tool/framework documentation, coding standards, programming language specifications, bug/issue reports, and looking at the wrong version of documentation or documentation for the wrong project/software.
            - [ ] S04 **Multitasking Errors**: Errors resulting from multitasking.
            - [ ] S05 **Hardware Interaction Errors:** Attention failures while using computer peripherals, such as mice, keyboard, and cables. Examples include copy/paste errors, clicking the wrong button, using the wrong keyboard shortcut, and incorrectly plugging in cables.
            - [ ] S06 **Overlooking Proposed Code Changes**: Errors resulting from lack of attention during formal/informal code review.
            - [ ] S07 **Overlooking Existing Functionality**: Errors resulting from overlooking existing functionality, such as reimplementing variables, functions, and classes that already exist, or reimplementing functionality that already exists in a standard library.
            - [ ] S08 **General Attentional Failure**: Only use this category if you believe your error to be the result of a lack of attention, but no other slip category fits.

            # Lapses
            - [ ] L01
            - [ ] L02
            - [ ] L03
            - [ ] L04
            - [ ] L05
            - [ ] L06
            - [ ] L07
            - [ ] L08

            # Mistakes
            - [ ] M01
            - [ ] M02
            - [ ] M03
            - [ ] M04
            - [ ] M05
            - [ ] M06
            - [ ] M07
            - [ ] M08
            - [ ] M09
            - [ ] M10
            - [ ] M11
            - [ ] M12
            - [ ] M13
            - [ ] M14
            - [ ] M15

            - [ ] Other

            ---
            All "err" issues:

            ${{ fromJSON(steps.count-err-issues.outputs.data).repository.issues.edges[0].node.title}}

